@page "/{page:int?}"
@using AspireDbAndCache.Blazor.Apis
@using AspireDbAndCahce.Contracts
@inject IExpenseApi expenseApi
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Expense List</PageTitle>

<h1>Expense List</h1>

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col fs-2">
                Total amount: @ExpenseAmount.ToString("N2")
            </div>
            <div class="col-2 text-end">
                <button class="btn btn-primary" @onclick="AddExpense">
                    Add expense
                </button>
            </div>
        </div>
    </div>
</div>


<div>
    @if (ExpensesList != null && ExpensesList.Expenses.Any())
    {
        <table class="table table-hover table-sm">
            <thead class="thead-dark">
                <tr>
                    <th>Create at</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Amount</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var expense in ExpensesList.Expenses)
                {
                    <tr style="--bs-table-bg:@expense.Category.Color">
                        <td>@expense.Date</td>
                        <td>@expense.Description</td>
                        <td>
                            <small>@expense.Note</small>
                        </td>
                        <td>@expense.Category.Name</td>
                        <td>
                            @(expense.CashFlow == AspireDbAndCahce.Contracts.Enums.CashFlowType.Expense ? "-" : string.Empty)
                            @expense.Amount.ToString("N2")
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditExpense(expense.Id)">
                                Edit
                            </button>
                            <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(expense.Id)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (ExpensesList.TotalPages > 1){
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    @if (ExpensesList.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="/@(ExpensesList.CurrentPage - 1)" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                                <span class="sr-only">Previous</span>
                            </a>
                        </li>
                    }
                    @for (var i = 1; i <= ExpensesList.TotalPages; i++)
                    {
                        <li class="page-item"><a class="page-link" href="/@i">@i</a></li>
                    }
                    @if (ExpensesList.CurrentPage < ExpensesList.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="/@(ExpensesList.CurrentPage + 1)" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                                <span class="sr-only">Next</span>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
</div>

@if (showDeleteModal)
{
    <div class="modal fade show" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this expense?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter]
    public int? page { get; set; }

    public ExpensesListResponse? ExpensesList { get; set; }
    public decimal ExpenseAmount { get; set; }
    private bool showDeleteModal = false;
    private int expenseIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var expenseListTask = expenseApi.GetExpensesAsync(page, default);
        var expenseAmountTask = expenseApi.GetExpensesAmountAsync(default);

        await Task.WhenAll(expenseListTask, expenseAmountTask);

        ExpensesList = expenseListTask.Result;
        ExpenseAmount = expenseAmountTask.Result;
    }

    void AddExpense() => NavigationManager.NavigateTo("/edit");

    void EditExpense(int expenseId) => NavigationManager.NavigateTo($"/edit/{expenseId}");

    void ShowDeleteConfirmation(int expenseId)
    {
        expenseIdToDelete = expenseId;
        showDeleteModal = true;
    }

    void CancelDelete()
    {
        showDeleteModal = false;
    }

    async Task ConfirmDelete()
    {
        await expenseApi.DeleteExpenseAsync(expenseIdToDelete);
        showDeleteModal = false;
        await LoadData();
        StateHasChanged();
    }
}